name: Release
on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: Disk-Mosaic
            asset_name: linux-x86_64
            friendly_name: Disk-Mosaic
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: Disk-Mosaic
            asset_name: linux-arm64
            friendly_name: Disk-Mosaic
          - os: macos-14
            target: aarch64-apple-darwin
            asset_name: macos-arm64
            friendly_name: DiskMosaic.app
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: Disk-Mosaic.exe
            asset_name: windows-x86_64
            friendly_name: Disk-Mosaic

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux ARM64 cross toolchain
        if: runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross pkgconf-aarch64-linux-gnu
          sudo ln -sf /usr/sbin/pkg-config /usr/sbin/aarch64-linux-gnu-pkg-config
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG=aarch64-linux-gnu-pkg-config" >> $GITHUB_ENV

      - name: Install cargo-bundle dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install librsvg pango pkg-config
          # Install cargo-bundle and cargo-bundle-licenses
          cargo install cargo-bundle cargo-bundle-licenses --locked

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Generate licenses (macOS)
        if: runner.os == 'macOS'
        run: cargo bundle-licenses --format yaml --output THIRDPARTY.yml

      - name: Build release binary/bundle
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            cargo bundle --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Prepare artifact (Linux/Windows)
        if: runner.os != 'macOS'
        shell: bash
        run: |
          mkdir -p release/${{ matrix.friendly_name }}
          # Copy binary and rename to friendly name
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.friendly_name }}/${{ matrix.artifact_name }}
          # Copy assets directory
          mkdir -p release/${{ matrix.friendly_name }}/assets
          cp -r assets/* release/${{ matrix.friendly_name }}/assets/
          # Copy media directory
          mkdir -p release/${{ matrix.friendly_name }}/media
          cp -r media/* release/${{ matrix.friendly_name }}/media/
          # Copy license and readme
          cp LICENSE release/${{ matrix.friendly_name }}/ || cp LICENCE release/${{ matrix.friendly_name }}/ || echo "No license file found"
          cp README.md release/${{ matrix.friendly_name }}/ || echo "No README.md file found"

          # Create archive based on OS
          cd release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a -tzip ${{ matrix.friendly_name }}-${{ github.ref_name }}-${{ matrix.asset_name }}.zip ${{ matrix.friendly_name }}
          else
            tar -czf ${{ matrix.friendly_name }}-${{ github.ref_name }}-${{ matrix.asset_name }}.tar.gz ${{ matrix.friendly_name }}
          fi
          cd ..

      - name: Prepare artifact (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          APP_NAME="${{ matrix.friendly_name }}"
          APP_DIR="target/${{ matrix.target }}/release/bundle/osx/$APP_NAME"
          DMG_NAME="${{ matrix.friendly_name }}-${{ github.ref_name }}-${{ matrix.asset_name }}.dmg"
          VOL_NAME="${{ matrix.friendly_name }} ${{ github.ref_name }}"

          # Ensure the app directory exists
          if [ ! -d "$APP_DIR" ]; then
            echo "Error: App directory not found at $APP_DIR"
            exit 1
          fi

          # Create Resources directory if it doesn't exist
          mkdir -p "$APP_DIR/Contents/Resources"

          # Copy assets, license, readme, and third-party licenses
          cp packaging/DiskMosaic.app/Contents/Info.plist "$APP_DIR/Contents/"
          cp packaging/DiskMosaic.app/Contents/Resources/AppIcon.icns "$APP_DIR/Contents/Resources/"

          # Copy assets directory
          mkdir -p "$APP_DIR/Contents/Resources/assets"
          cp -r assets/* "$APP_DIR/Contents/Resources/assets/"

          # Copy media directory
          mkdir -p "$APP_DIR/Contents/Resources/media"
          cp -r media/* "$APP_DIR/Contents/Resources/media/"

          cp LICENSE "$APP_DIR/Contents/Resources/" || cp LICENCE "$APP_DIR/Contents/Resources/" || echo "No license file found"
          cp README.md "$APP_DIR/Contents/Resources/" || echo "No README.md file found"
          cp THIRDPARTY.yml "$APP_DIR/Contents/Resources/" || echo "No THIRDPARTY.yml file found"

          # Create DMG
          mkdir -p release
          hdiutil create -volname "$VOL_NAME" -srcfolder "$APP_DIR" -ov -format UDZO "release/$DMG_NAME"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.friendly_name }}-${{ github.ref_name }}-${{ matrix.asset_name }}
          # Adjust path glob to include .dmg, .zip, .tar.gz
          path: release/${{ matrix.friendly_name }}-${{ github.ref_name }}-${{ matrix.asset_name }}.*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: find artifacts -type f | sort

      - name: Generate SHA256 checksums
        shell: bash
        run: |
          shopt -s globstar
          for f in artifacts/**/*; do
            [ -f "$f" ] || continue
            [[ "$f" == *.sha256 ]] && continue
            sha256sum "$f" > "$f".sha256
          done
          echo "Generated checksums:"
          find artifacts -type f -name "*.sha256" -print

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          name: Disk Mosaic ${{ github.ref_name }}
          body: |
            # Disk Mosaic ${{ github.ref_name }}

            Disk Mosaic is a utility tool that helps you visually identify how your disk space is used and where.
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
